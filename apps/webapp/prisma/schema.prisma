generator client {
  provider      = "prisma-client-js"
  // One for local dev, one for nodejs docker
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(cuid())
  email String? @unique
  name  String?

  phoneNumbers PhoneNumber[]

  claimCategories ClaimCategory[]
  apiKeys         ApiKey[]

  // Auth.js fields
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PhoneNumber {
  id String @id @default(cuid())

  phoneNumber      String    @unique
  verificationCode String?
  verifiedAt       DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model ApiKey {
  id String @id @default(cuid())

  key String @unique @default(dbgenerated("encode(sha256(random()::text::bytea), 'hex')")) @db.Char(64)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model WhitelistedEmail {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NodeType {
  observable
  inferrable
  speculative
}

model UserClaim {
  id String @id @default(cuid())

  label          String
  description    String
  nodeType       NodeType
  conversationId String
  frequency      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  claimCategory   ClaimCategory @relation(fields: [claimCategoryId], references: [id], onDelete: Cascade)
  claimCategoryId String
}

model ClaimCategory {
  id String @id @default(cuid())

  name         String
  clusterLabel Int
  isPersonal   Boolean

  userClaims UserClaim[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId, clusterLabel])
}

// -------------------- Auth.js models --------------------
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
